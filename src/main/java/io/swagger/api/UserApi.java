/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.UserBaseReqBody;
import io.swagger.model.UserUpdateReqBody;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-08-11T15:52:03.807Z[GMT]")
@Api(value = "user", description = "the user API")
public interface UserApi {

	@ApiOperation(value = "deletes a user account", nickname = "userDelete", notes = "", tags = { "developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "user deleted succesfully") })
	@RequestMapping(value = "/user", method = RequestMethod.DELETE)
	ResponseEntity<Void> userDelete(
			@ApiParam(value = "unique user identifier") @Valid @RequestParam(value = "userId", required = false) String userId);

	@ApiOperation(value = "gets user preferences", nickname = "userGet", notes = "", response = UserBaseReqBody.class, tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "user was found", response = UserBaseReqBody.class),
			@ApiResponse(code = 400, message = "user id not found") })
	@RequestMapping(value = "/user", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<UserBaseReqBody> userGet(
			@NotNull @ApiParam(value = "unique user identifier", required = true) @Valid @RequestParam(value = "userId", required = true) String userId);

	@ApiOperation(value = "creates a user account", nickname = "userPost", notes = "", tags = { "developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "user successfully created"),
			@ApiResponse(code = 409, message = "user email already exists") })
	@RequestMapping(value = "/user", consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> userPost(@ApiParam(value = "user account details") @Valid @RequestBody UserBaseReqBody body);

	@ApiOperation(value = "updates user preferences", nickname = "userPut", notes = "", tags = { "developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "user updated successfully"),
			@ApiResponse(code = 400, message = "old password did not match"),
			@ApiResponse(code = 409, message = "user not found") })
	@RequestMapping(value = "/user", consumes = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> userPut(
			@ApiParam(value = "user account details to update") @Valid @RequestBody UserUpdateReqBody body);

}
