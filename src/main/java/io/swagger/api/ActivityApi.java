/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ActivityBase;
import io.swagger.model.ActivityBaseReqBody;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-08-11T15:52:03.807Z[GMT]")
@Api(value = "activity", description = "the activity API")
public interface ActivityApi {

	@ApiOperation(value = "deletes an activity record", nickname = "activityDelete", notes = "", tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "deleted activity successfully") })
	@RequestMapping(value = "/activity", method = RequestMethod.DELETE)
	ResponseEntity<Void> activityDelete(
			@NotNull @ApiParam(value = "unique activity identifier", required = true) @Valid @RequestParam(value = "activityId", required = true) String activityId);

	@ApiOperation(value = "gets details of a recorded activity", nickname = "activityGet", notes = "", response = ActivityBase.class, tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "activity details", response = ActivityBase.class) })
	@RequestMapping(value = "/activity", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<ActivityBase> activityGet(
			@NotNull @ApiParam(value = "unique user identifier", required = true) @Valid @RequestParam(value = "userId", required = true) String userId,
			@NotNull @ApiParam(value = "unique activity identifier", required = true) @Valid @RequestParam(value = "activityId", required = true) String activityId);

	@ApiOperation(value = "records a user activity", nickname = "activityPost", notes = "", tags = { "developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "activity recorded successfully") })
	@RequestMapping(value = "/activity", consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> activityPost(
			@ApiParam(value = "activity to record") @Valid @RequestBody ActivityBaseReqBody body);

	@ApiOperation(value = "updates an activity record", nickname = "activityPut", notes = "", tags = { "developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "activity updated successfully") })
	@RequestMapping(value = "/activity", consumes = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> activityPut(
			@ApiParam(value = "activity details to update") @Valid @RequestBody ActivityBaseReqBody body);

}
